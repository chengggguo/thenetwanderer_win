{
  "_args": [
    [
      "canvg@^2.0.0-beta.0",
      "/home/fito/Downloads/guocheng/node_modules/svgcode"
    ]
  ],
  "_from": "canvg@>=2.0.0-beta.0 <3.0.0",
  "_hasShrinkwrap": false,
  "_id": "canvg@2.0.0-beta.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/canvg",
  "_nodeVersion": "9.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/canvg_2.0.0-beta.1_1552061842322_0.17892937537437237"
  },
  "_npmUser": {
    "email": "gabelerner@gmail.com",
    "name": "gabelerner"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "name": "canvg",
    "raw": "canvg@^2.0.0-beta.0",
    "rawSpec": "^2.0.0-beta.0",
    "scope": null,
    "spec": ">=2.0.0-beta.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/svgcode"
  ],
  "_resolved": "https://registry.npmjs.org/canvg/-/canvg-2.0.0-beta.1.tgz",
  "_shasum": "cb1d9551276a6303f4d893ef2b2d38a4bc27acc4",
  "_shrinkwrap": null,
  "_spec": "canvg@^2.0.0-beta.0",
  "_where": "/home/fito/Downloads/guocheng/node_modules/svgcode",
  "author": {
    "email": "gabelerner@gmail.com",
    "name": "Gabe Lerner"
  },
  "browser": "dist/browser/canvg.min.js",
  "bugs": {
    "url": "https://github.com/canvg/canvg/issues"
  },
  "contributors": [
    {
      "name": "Brett Zamir"
    }
  ],
  "dependencies": {
    "rgbcolor": "^1.0.1",
    "stackblur-canvas": "^2.0.0"
  },
  "description": "Javascript SVG parser and renderer on Canvas",
  "devDependencies": {
    "ava": "^1.0.0-rc.2",
    "ava-is-running": "^1.0.3",
    "blink-diff": "^1.0.13",
    "bluebird": "^3.5.3",
    "canvas": "^2.1.0",
    "data-uri-to-buffer": "^2.0.0",
    "debug": "^4.1.0",
    "eslint": "^5.9.0",
    "jsdom": "^13.0.0",
    "mkdirp": "^0.5.1",
    "pngjs-image": "^0.11.7",
    "puppeteer": "^1.10.0",
    "rollup": "^0.67.3",
    "rollup-plugin-alias": "^1.4.0",
    "rollup-plugin-commonjs": "^9.2.0",
    "rollup-plugin-json": "^3.1.0",
    "rollup-plugin-node-resolve": "^3.4.0",
    "rollup-plugin-replace": "^2.1.0",
    "serve-handler": "^5.0.7",
    "tap-diff": "^0.1.1",
    "uglify-js": "^3.4.9",
    "xmldom": "^0.1.27"
  },
  "directories": {},
  "dist": {
    "fileCount": 8,
    "integrity": "sha512-ZIgTBzivrrX7idH4yETcg+xpKmWXYwA1f9W1yFFv/p2XfqNl76uvbyMEcdJBWY7J6oXrCKTVjGUK9cMdn50LtQ==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgpWTCRA9TVsSAnZWagAAHVYP/33SZz7iMcYK4yKw8j3C\nKTTf0k+3fBwYlgVrHxCROG0TnGA03pW4i/sf6Q2CUXvQVCZx+o8cv+fkv95b\nd+NYbZ7RdGdnUgNLtB51J4CynQOmzVcNYu5KyB4hMJFglyZ2JfAl72zcy+gS\ncEiSPe/4+JLmMTnvvkJ1KCJiQ/FA/+bl8uza3p6q+sECSCx9Mtbt6LmulF7h\npwIyZPUfigu2qu0N9JArO5y2gc/jG7x1qi35aBDmdQZasUYeBsDzUBYxPxR7\nrawDC/1fxwosRUkq549r4Ieq3BC+J/k+qM8OvDP72S0BFCsaUlRDb/VuTDh9\n/7ET10xCgLbGU9JGPYEUZq79TljlbCvLukMxuH89PnZktf0i3CYSgCc5KIak\ngo1Q+7+vby7xB39z6qzp+/DdP2Q04OFxM9bdT3nbrezzz95zyQBTWHSD6KBI\n0LIqVA7bdt+E5ttGXNqemKexWJzIGyWjMnNcLBUu0hQijzgsO89axPIPjpBk\nt5d2TX0GCaBholekNh4UZC0sH2eO6wBZ8Ssz44fq3huXIfshh+ppbAmAGxGx\n1zeVoIigkmNniLOIL1gZ6rCYqXNyAzSJoSoQJgvDU5Bdbc+SB3sRahMeNCZg\nIz9VlSmf+rLc40c8ocsq4I3+MAFTLq2KIhlSysVYK2Wr+osAfYs9Kx5ZQuV+\njg02\r\n=19iw\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "cb1d9551276a6303f4d893ef2b2d38a4bc27acc4",
    "tarball": "https://registry.npmjs.org/canvg/-/canvg-2.0.0-beta.1.tgz",
    "unpackedSize": 380532
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "cef40f0a74420c12323fb2ef5b5f9e3aa1b92740",
  "homepage": "https://github.com/canvg/canvg",
  "jspm": {
    "registry": "npm"
  },
  "keywords": [
    "browser",
    "canvas",
    "client",
    "javascript",
    "svg"
  ],
  "license": "MIT",
  "main": "dist/node/canvg.js",
  "maintainers": [
    {
      "name": "aarono",
      "email": "aaron.omullan@gmail.com"
    },
    {
      "name": "gabelerner",
      "email": "gabelerner@gmail.com"
    },
    {
      "name": "yetzt",
      "email": "node@yetzt.me"
    }
  ],
  "name": "canvg",
  "optionalDependencies": {},
  "peerDependencies": {
    "canvas": "^2.1.0",
    "jsdom": "^13.0.0",
    "xmldom": "^0.1.27"
  },
  "readme": "# canvg\n\n[![Build Status](https://travis-ci.com/canvg/canvg.svg?branch=master)](https://travis-ci.com/canvg/canvg)\n[![npm](https://img.shields.io/npm/dm/canvg.svg)](https://www.npmjs.com/package/canvg)\n[![](https://data.jsdelivr.com/v1/package/npm/canvg/badge?style=rounded)](https://www.jsdelivr.com/package/npm/canvg)\n\n## Looking for Contributors\n\nIn an attempt to keep this repo more active and merge PRs and do releases, if you would like to be a contributor, please start a conversation with me at gabelerner at gmail. The prerequisite is to have a few PRs open to prove out an understanding of the code.  Thanks!\n\n## Introduction\n\ncanvg is a SVG parser and renderer. It takes a URL to a SVG file or the text of an SVG file, parses it in JavaScript, and renders the result on a [Canvas](http://dev.w3.org/html5/2dcontext/) element.  The rendering speed of the examples is about as fast as native SVG.\n\n## What's implemented?\n\nThe end goal is everything from the [SVG spec](http://www.w3.org/TR/SVG/). The majority of the rendering and animation is working.  If you would like to see a feature implemented, don't hesitate to contact me or add it to the issues list.\n\n## Potential uses\n\n* Allows for inline embedding of SVG through JavaScript (w/o having to request another file or break validation)\n* Allows for single SVG version across all browsers that support Canvas\n* Allows for mobile devices supporting Canvas but not SVG to render SVG\n* Allows for SVG -> Canvas -> png transition all on the client side (through [toDataUrl](http://www.w3.org/TR/html5/the-canvas-element.html#dom-canvas-todataurl))\n\n## Example Demonstration\n\n[hosted](http://canvg.github.io/canvg/examples/index.htm)\n\n[jsfiddle playground](http://jsfiddle.net/6r2jug6o/2590/)\n\nLocally, you can run `npm start` and view the examples at [http://localhost:3123/examples/index.htm](http://localhost:3123/examples/index.htm)\n\n## Building\n\n`npm run build` then look in the `dist` folder\n\n## Testing\n\n- `npm run test-node` runs tests on `node`\n- `npm run test-browser` runs tests on `browser`\n- `npm run generate-expected foo.svg` to create the expected png for a given svg in the `svgs` folder\n\n## Usage on the server\n\n`npm install canvg@^1.5`\n\n**2.0.0 beta** (see [CHANGELOG](https://github.com/canvg/canvg/blob/master/CHANGELOG.md))\n\n`npm install canvg@2.0.0-beta.1 canvas@^2 jsdom@^13 xmldom@^0`\n\nThe dependencies required on the server only are peers so must be installed\nalongside the canvg package.\n\n## Usage on the browser\n\nFor browser applications with a build process, canvg can be installed using `npm` similar to use on the server. Note in this case the peer dependencies are not required so do not need to be installed.\n\nAlternatively, canvg can be included directly into a webpage:\n```html\n<!-- Required to convert named colors to RGB -->\n<script src=\"https://cdn.jsdelivr.net/npm/rgbcolor@^1/index.js\"></script>\n<!-- Optional if you want blur -->\n<script src=\"https://cdn.jsdelivr.net/npm/stackblur-canvas@^1/dist/stackblur.min.js\"></script>\n<!-- Main canvg code -->\n<script src=\"https://cdn.jsdelivr.net/npm/canvg/dist/browser/canvg.min.js\"></script>\n```\n\nFor the **2.0.0 beta** (see [CHANGELOG](https://github.com/canvg/canvg/blob/master/CHANGELOG.md)), use this:\n```html\n<!-- Required to convert named colors to RGB -->\n<script src=\"https://cdn.jsdelivr.net/npm/rgbcolor@^1/index.js\"></script>\n<!-- Optional if you want blur -->\n<script src=\"https://cdn.jsdelivr.net/npm/stackblur-canvas@^1/dist/stackblur.min.js\"></script>\n<!-- Main canvg code -->\n<script src=\"https://cdn.jsdelivr.net/npm/canvg@2.0.0-beta.1/dist/browser/canvg.min.js\"></script>\n```\n\nPut a canvas on your page\n```html\n<canvas id=\"canvas\" width=\"1000px\" height=\"600px\"></canvas>\n```\n\nExample canvg calls:\n```html\n<script>\nwindow.onload = function() {\n  //load '../path/to/your.svg' in the canvas with id = 'canvas'\n  canvg('canvas', '../path/to/your.svg')\n\n  //load a svg snippet in the canvas with id = 'drawingArea'\n  canvg(document.getElementById('drawingArea'), '<svg>...</svg>')\n\n  //ignore mouse events and animation\n  canvg('canvas', 'file.svg', { ignoreMouse: true, ignoreAnimation: true })\n}\n</script>\n```\n\nThe third parameter is options:\n* log: true => console.log information\n* ignoreMouse: true => ignore mouse events\n* ignoreAnimation: true => ignore animations\n* ignoreDimensions: true => does not try to resize canvas\n* ignoreClear: true => does not clear canvas\n* offsetX: int => draws at a x offset\n* offsetY: int => draws at a y offset\n* scaleWidth: int => scales horizontally to width\n* scaleHeight: int => scales vertically to height\n* renderCallback: function => will call the function after the first render is completed\n* forceRedraw: function => will call the function on every frame, if it returns true, will redraw\n* useCORS: true => will attempt to use CORS on images to not taint canvas\n\nYou can call canvg without parameters to replace all svg images on a page. See the\n[example](http://canvg.github.io/canvg/examples/convert.htm).\n\nThere is also a built in extension method to the canvas context to draw svgs similar to the way [drawImage](http://www.w3.org/TR/2dcontext/#dom-context-2d-drawimage) works:\n```javascript\nvar c = document.getElementById('canvas');\nvar ctx = c.getContext('2d');\nctx.drawSvg(SVG_XML_OR_PATH_TO_SVG, dx, dy, dw, dh);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/canvg/canvg.git"
  },
  "scripts": {
    "build": "npm run eslint && npm run build-browser && npm run build-node && npm run minify",
    "build-browser": "touch src/dummy.js && rollup -c && rm src/dummy.js",
    "build-browser-win": "type nul > src\\dummy.js && rollup -c",
    "build-node": "IS_NODE=1 rollup -c",
    "build-node-win": "cmd /C \"set IS_NODE=1 && rollup -c\"",
    "build-win": "npm run build-browser-win && npm run build-node-win && npm run minify && del src\\dummy.js",
    "eslint": "eslint --report-unused-disable-directives .",
    "generate-expected": "node test/_generate_expected_node.js",
    "minify": "npm run minify-browser",
    "minify-browser": "uglifyjs --mangle --compress if_return=true -o dist/browser/canvg.min.js dist/browser/canvg.js",
    "start": "node test/_server.js",
    "test": "npm run test-common && npm run test-node",
    "test-browser": "ava test/browser.test.js --tap | tap-diff",
    "test-common": "ava test/common.test.js --tap | tap-diff",
    "test-node": "ava test/node.test.js --tap | tap-diff"
  },
  "types": "dist/node/canvg.d.ts",
  "version": "2.0.0-beta.1"
}
